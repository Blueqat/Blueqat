# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, The Blueqat Developers
# This file is distributed under the same license as the Blueqat package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blueqat \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-19 23:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/blueqat.rst:2
msgid "blueqat package"
msgstr ""

#: ../../source/api/blueqat.rst:5
msgid "Submodules"
msgstr ""

#: ../../source/api/blueqat.rst:8
msgid "blueqat.circuit module"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit:1
msgid "This module defines Circuit and the setting for circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting:1
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit:1
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase:1
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.Vqe:1
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.VqeResult:1
#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting:1
msgid "Setting for Blueqat."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.get_default_backend_name:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.get_default_backend_name:1
msgid "Get the default backend name."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.get_default_backend_name:3
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.get_default_backend_name:3
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:18
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:8
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.get_time_evolution:4
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:7
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:9
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:8
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.qubo_bit:6
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:8
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_expr:6
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_term:6
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.sparse_expectation:8
#: ../../../blueqat/wq.py:docstring of blueqat.wq.qn_to_qubo:5
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.get_default_backend_name:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:18
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.get_default_backend_name:3
msgid "Returns:"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.get_default_backend_name:4
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.get_default_backend_name:4
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.get_default_backend_name:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.get_default_backend_name:4
msgid "str: The name of default backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:1
msgid "Register new backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:8
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:7
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:7
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_backend:4
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_gate:4
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_macro:4
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:13
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:5
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:5
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:7
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:5
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.qubo_bit:4
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:5
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_expr:4
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_term:4
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.sparse_expectation:5
#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:5
#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:4
#: ../../../blueqat/wq.py:docstring of blueqat.wq.qn_to_qubo:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:13
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:8
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:7
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:7
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_backend:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_gate:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_macro:4
msgid "Args:"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:0
msgid "name (str): The name of backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:0
msgid "gateclass (type): The type object of backend"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:0
msgid "allow_overwrite (bool, optional): If True, allow to overwrite the existing backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:8
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:0
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:8
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:0
msgid "Otherwise, raise the ValueError."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:11
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:10
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:10
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.set_default_backend:5
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_backend:6
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_gate:6
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_macro:6
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:20
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:15
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:10
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:10
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:10
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:20
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:15
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:11
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:10
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:10
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.set_default_backend:5
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_backend:6
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_gate:6
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_macro:6
msgid "Raises:"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:11
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:11
msgid "ValueError: The name is duplicated with existing backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_backend:12
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:11
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:11
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_backend:12
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:11
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:11
msgid "When `allow_overwrite=True`, this error is not raised."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:1
msgid "Register new gate to gate set."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:0
msgid "name (str): The name of gate."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:0
msgid "gateclass (type): The type object of gate."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:0
msgid "allow_overwrite (bool, optional): If True, allow to overwrite the existing gate."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_gate:10
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_gate:10
msgid "ValueError: The name is duplicated with existing gate."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:1
msgid "Register new macro to Circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:0
msgid "name (str): The name of macro."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:0
msgid "func (callable): The function to be called."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:0
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:0
msgid "allow_overwrite (bool, optional): If True, allow to overwrite the existing macro."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.register_macro:10
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.register_macro:10
msgid "ValueError: The name is duplicated with existing macro, gate or method."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.remove_backend:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.remove_backend:1
msgid "This method is deperecated. Use `unregister_backend` method."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.set_default_backend:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.set_default_backend:1
msgid "Set the default backend to be used by `Circuit`. Args:"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.set_default_backend:3
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.set_default_backend:3
msgid "name (str): The name of the default backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.set_default_backend:6
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_backend:7
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.set_default_backend:6
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_backend:7
msgid "ValueError: Specified backend is not registered."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_backend:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_backend:1
msgid "Unregister a backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_backend:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_backend:4
msgid "name (str): The name of the backend to be unregistered."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_gate:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_gate:1
msgid "Unregister a gate from gate set"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_gate:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_gate:4
msgid "name (str): The name of the gate to be unregistered."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_gate:7
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_macro:7
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_gate:7
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_macro:7
msgid "ValueError: Specified gate is not registered."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_macro:1
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_macro:1
msgid "Unregister a macro."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.BlueqatGlobalSetting.unregister_macro:4
#: ../../../blueqat/circuit.py:docstring of blueqat.BlueqatGlobalSetting.unregister_macro:4
msgid "name (str): The name of the macro to be unregistered."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit:1
msgid "Store the gate operations and call the backends."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.copy:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.copy:1
msgid "Copy the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.copy:4
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.copy:4
msgid "params:"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.copy:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.copy:0
msgid "copy_backends :bool copy backends if True."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.copy:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.copy:0
msgid "copy_default_backend :bool copy default_backend if True."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.dagger:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.dagger:1
msgid "Make Hermitian conjugate of the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.dagger:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.dagger:3
msgid "This feature is beta. Interface may be changed."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.dagger:6
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.dagger:6
msgid "ignore_measurement (bool, optional):"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.dagger:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.dagger:0
msgid "If True, ignore the measurement in the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.dagger:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.dagger:0
msgid "Otherwise, if measurement in the circuit, raises ValueError."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.get_default_backend_name:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.get_default_backend_name:1
msgid "Get the default backend of this circuit or global setting."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.make_cache:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.make_cache:1
msgid "Make a cache to reduce the time of run. Some backends may implemented it."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.make_cache:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.make_cache:3
msgid "This is temporary API. It may changed or deprecated."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:1
msgid "Run the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:3
msgid "`Circuit` have several backends. When `backend` parameter is specified, use specified backend, and otherwise, default backend is used. Other parameters are passed to the backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:7
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:7
msgid "The meaning of parameters are depends on the backend specifications. However, following parameters are commonly used."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:15
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:15
msgid "Commonly used args (Depends on backend):"
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:0
msgid "shots (int, optional): The number of sampling the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:0
msgid "returns (str, optional):  The category of returns value."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:0
msgid "e.g. \"statevector\" returns the state vector after run the circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:0
msgid "\"shots\" returns the counter of measured value."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:0
msgid "token, url (str, optional): The token and URL for cloud resource."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:18
#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.run:21
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:18
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.run:21
msgid "Depends on backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:1
msgid "Set the default backend of this circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:3
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:3
msgid "This setting is only applied for this circuit. If you want to change the default backend of all gates, use `BlueqatGlobalSetting.set_default_backend()`."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:7
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:7
msgid "After set the default backend by this method, global setting is ignored even if `BlueqatGlobalSetting.set_default_backend()` is called. If you want to use global default setting, call this method with backend_name=None."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:0
msgid "backend_name (str or None): new default backend name."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:0
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:0
msgid "If None is given, global setting is applied."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.set_default_backend:16
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.set_default_backend:16
msgid "ValueError: If `backend_name` is not registered backend."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.to_qasm:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.to_qasm:1
msgid "Returns the OpenQASM output of this circuit."
msgstr ""

#: ../../../blueqat/circuit.py:docstring of blueqat.circuit.Circuit.to_unitary:1
#: ../../../blueqat/circuit.py:docstring of blueqat.Circuit.to_unitary:1
msgid "Returns sympy unitary matrix of this circuit."
msgstr ""

#: ../../source/api/blueqat.rst:16
msgid "blueqat.gate module"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate:1
msgid "`gate` module implements quantum gate operations. This module is internally used."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CCZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CSwapGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.OneQubitGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.ToffoliGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TwoQubitGate:1
msgid "Bases: :class:`blueqat.gate.Gate`"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CCZGate:1
msgid "2-Controlled Z gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CCZGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CHGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CPhaseGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRXGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRYGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRZGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CSwapGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU2Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU3Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CXGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CYGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CZGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.HGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.IGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Measurement.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXXGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYYGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZZGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Reset.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SDagGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SwapGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TDagGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.ToffoliGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U2Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U3Gate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.XGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.YGate.dagger:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.ZGate.dagger:1
msgid "Returns the Hermitian conjugate of `self`."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CHGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CPhaseGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRXGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRYGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU2Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU3Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CXGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CYGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXXGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYYGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SwapGate:1
msgid "Bases: :class:`blueqat.gate.TwoQubitGate`"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CHGate:1
msgid "Controlled-H gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CHGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CPhaseGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRXGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRYGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRZGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CSwapGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU2Gate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU3Gate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.CYGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Gate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.IGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXXGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYYGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZZGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SDagGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SwapGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TDagGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.ToffoliGate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate.fallback:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U2Gate.fallback:1
msgid "Returns alternative gates to make equivalent circuit."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CPhaseGate:1
msgid "Rotate-Z gate but phase is different."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRXGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXGate:1
msgid "Rotate-X gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRYGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYGate:1
msgid "Rotate-Y gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CRZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZGate:1
msgid "Rotate-Z gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CSwapGate:1
msgid "Controlled SWAP gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate:1
msgid "Controlled U1 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate:3
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate:3
msgid "U1 gate is as same as RZ gate and CU1 gate is as same as CPhase gate. It is because for compatibility with IBM's implementations."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU1Gate:6
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate:6
msgid "You should probably use RZ/CRZ gates or Phase/CPhase gates instead of U1/CU1 gates."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU2Gate:1
msgid "Controlled U2 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CU3Gate:1
msgid "Controlled U3 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CXGate:1
msgid "Controlled-X (CNOT) gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CYGate:1
msgid "Controlled-Y gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.CZGate:1
msgid "Controlled-Z gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.Gate:1
msgid "Bases: :class:`abc.ABC`"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.Gate:1
msgid "Abstract quantum gate class."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.Gate.uppername:1
msgid "Upper name of the gate."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.HGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.IGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Measurement:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.Reset:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SDagGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.SGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TDagGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.TGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U2Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.U3Gate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.XGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.YGate:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.ZGate:1
msgid "Bases: :class:`blueqat.gate.OneQubitGate`"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.HGate:1
msgid "Hadamard gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.IGate:1
msgid "Identity gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.Measurement:1
msgid "Measurement operation"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.OneQubitGate:1
msgid "Abstract quantum gate class for 1 qubit gate."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.OneQubitGate.target_iter:1
msgid "The generator which yields the target qubits."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate:1
msgid "Rotate-Z gate but global phase is different."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate:3
msgid "Global phase doesn't makes any difference of measured result. You may use RZ gate or U1 gate instead, but distinguishing these gates may better for debugging or future improvement."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.PhaseGate:7
msgid "furthermore, phase gate may efficient for simulating. (It depends on backend implementation. But matrix of phase gate is simpler than RZ gate or U1 gate.)"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.RXXGate:1
msgid "Rotate-XX gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.RYYGate:1
msgid "Rotate-YY gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.RZZGate:1
msgid "Rotate-ZZ gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.Reset:1
msgid "Reset operation"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.SDagGate:1
msgid "Dagger of S gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.SGate:1
msgid "S gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.SwapGate:1
msgid "Swap gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.TDagGate:1
msgid "Dagger of T ($\\pi/8$) gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.TGate:1
msgid "T ($\\pi/8$) gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.ToffoliGate:1
msgid "Toffoli (CCX) gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.TwoQubitGate:1
msgid "Abstract quantum gate class for 2 qubits gate."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.TwoQubitGate.control_target_iter:1
msgid "The generator which yields the tuples of (control, target) qubits."
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.U1Gate:1
msgid "U1 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.U2Gate:1
msgid "U2 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.U3Gate:1
msgid "U3 gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.XGate:1
msgid "Pauli's X gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.YGate:1
msgid "Pauli's Y gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.ZGate:1
msgid "Pauli's Z gate"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.find_n_qubits:1
msgid "Find n_qubits from gates"
msgstr ""

#: ../../../blueqat/gate.py:docstring of blueqat.gate.get_maximum_index:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.qubit_pairs:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.slicing:1
#: ../../../blueqat/gate.py:docstring of blueqat.gate.slicing_singlevalue:1
msgid "Internally used."
msgstr ""

#: ../../source/api/blueqat.rst:24
msgid "blueqat.pauli module"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli:1
msgid "The module for calculate Pauli matrices."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr:1
msgid "Bases: :class:`blueqat.pauli._ExprTuple`"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.coeffs:1
msgid "Generator which yields a coefficent for each Term."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.commutator:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.commutator:1
msgid "Returns commutator."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.from_number:1
msgid "Make new Expr from a number"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.from_term:1
msgid "Make new Expr from a Term"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.from_terms_dict:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.from_terms_iter:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.terms_to_dict:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_ops_iter:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.join_ops:1
msgid "For internal use."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.is_all_terms_commutable:1
msgid "Test whether all terms are commutable. This function may very slow."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.is_commutable_with:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.is_commutable_with:1
msgid "Test whether `self` is commutable with `other`."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.max_n:1
msgid "Returns the maximum index of Pauli matrices in the Expr. If Expr is empty or only constant and identity matrix, returns -1."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.simplify:1
msgid "Simplify the Expr."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.to_expr:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.to_term:1
msgid "Do nothing. This method is prepared to avoid TypeError."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.to_matrix:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.to_matrix:1
msgid "Convert to the matrix."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.zero:1
msgid "Returns 0 as Term"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.is_identity:1
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.is_identity:1
msgid "If `self` is I, returns True, otherwise False."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.n_qubits:1
msgid "Returns the number of qubits of the Term."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Expr.n_qubits:3
msgid "If Expr is empty or only constant and identity matrix, returns 0."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term:1
msgid "Bases: :class:`blueqat.pauli._TermTuple`"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term:1
msgid "Multiplication of Pauli matrices with coefficient. Note that this class is immutable."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term:4
msgid "Multiplied Pauli matrices are very important for quantum computation because it is an unitary matrix (without coefficient) and also it can be consider the time evolution of the term (with real coefficient) without Suzuki-Trotter expansion."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.append_to_circuit:1
msgid "Append Pauli gates to `Circuit`."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:1
msgid "Make Pauli's Term from chars which is written by \"X\", \"Y\", \"Z\" or \"I\". e.g. \"XZIY\" => X(0) * Z(1) * Y(3)"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:5
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:5
msgid "chars (str): Written in \"X\", \"Y\", \"Z\" or \"I\"."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:8
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:8
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_term:7
msgid "Term: A `Term` object."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_chars:11
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:11
msgid "ValueError: When chars conteins the character which is \"X\", \"Y\", \"Z\" nor \"I\"."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_pauli:1
msgid "Make new Term from an Pauli operator"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.from_paulipair:1
msgid "Make new Term from two Pauli operator."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.get_time_evolution:1
msgid "Get the function to append the time evolution of this term."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.get_time_evolution:4
msgid "function(circuit: Circuit, t: float):"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.get_time_evolution:5
msgid "Add gates for time evolution to `circuit` with time `t`"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.max_n:1
msgid "Returns the maximum index of Pauli matrices in the Term. If there's no Pauli matrices, returns -1."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.n_iter:1
msgid "Returns an iterator which yields indices for each Pauli matrices in the Term."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.simplify:1
msgid "Simplify the Term."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.to_expr:1
msgid "Convert to Expr."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.Term.n_qubits:1
msgid "Returns the number of qubits of the term. If the term is constant with identity matrix, n_qubits is 0."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:1
msgid "Returns [expr1, expr2] = expr1 * expr2 - expr2 * expr1."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:0
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:0
msgid "expr1 (Expr, Term or Pauli operator): Pauli's expression."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:0
#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:0
msgid "expr2 (Expr, Term or Pauli operator): Pauli's expression."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.commutator:8
msgid "Expr: expr1 * expr2 - expr2 * expr1."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:1
msgid "Test whether expr1 and expr2 are commutable."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:0
msgid "eps (float, optional): Machine epsilon.   If | \\[expr1, expr2 \\]| < eps, consider it is commutable."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.is_commutable:10
msgid "bool: if expr1 and expr2 are commutable, returns True, otherwise False."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:1
msgid "Make Pauli matrix from an character."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:0
msgid "ch (str): \"X\" or \"Y\" or \"Z\" or \"I\"."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:0
msgid "n (int, optional): Make Pauli matrix as n-th qubits."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:8
msgid "If ch is \"X\" => X, \"Y\" => Y, \"Z\" => Z, \"I\" => I"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.pauli_from_char:11
msgid "ValueError: When ch is not \"X\", \"Y\", \"Z\" nor \"I\"."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.qubo_bit:1
msgid "Represent QUBO's bit to Pauli operator of Ising model."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.qubo_bit:4
msgid "n (int): n-th bit in QUBO"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.qubo_bit:7
msgid "Expr: Pauli expression of QUBO bit."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.term_from_chars:1
msgid "Make Pauli's Term from chars which is written by \"X\", \"Y\", \"Z\" or \"I\". e.g. \"XZIY\" => X(3) * Z(2) * Y(0)"
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_expr:1
msgid "Convert to Expr from Term or Pauli operator (X, Y, Z, I)."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_expr:4
msgid "term: (Term, X, Y, Z or I): A Term or Pauli operator."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_expr:7
msgid "Expr: An `Expr` object."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_term:1
msgid "Convert to Term from Pauli operator (X, Y, Z, I)."
msgstr ""

#: ../../../blueqat/pauli.py:docstring of blueqat.pauli.to_term:4
msgid "pauli (X, Y, Z or I): A Pauli operator"
msgstr ""

#: ../../source/api/blueqat.rst:32
msgid "blueqat.vqe module"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase.get_circuit:1
#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.QaoaAnsatz.get_circuit:1
msgid "Make a circuit from parameters."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase.get_energy:1
msgid "Calculate energy from circuit and sampler."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase.get_energy_sparse:1
msgid "Get energy using sparse matrix. This method may be changed in the future release."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase.get_objective:1
msgid "Get an objective function to be optimized."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.AnsatzBase.make_sparse:1
msgid "Make sparse matrix. This method may be changed in the future release."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.QaoaAnsatz:1
msgid "Bases: :class:`blueqat.vqe.AnsatzBase`"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.QaoaAnsatz:1
msgid "Ansatz for QAOA."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.QaoaAnsatz.check_hamiltonian:1
msgid "Check hamiltonian is commutable. This condition is required for QaoaAnsatz"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.Vqe.result:1
msgid "Vqe.result is deprecated. Use `result = Vqe.run()`."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.VqeResult.get_probs:1
msgid "Get probabilities."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.VqeResult.probs:1
msgid "Get probabilities. This property is obsoleted. Use get_probs()."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.expect:1
msgid "For the VQE simulation without sampling."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.get_measurement_sampler:1
msgid "Returns a function which get the expectations by sampling the measured circuit"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.get_qiskit_sampler:1
msgid "Returns a function which get the expectation by sampling via Qiskit."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.get_qiskit_sampler:3
msgid "This function requires `qiskit` module."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.get_scipy_minimizer:1
msgid "Get minimizer which uses `scipy.optimize.minimize`"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.get_state_vector_sampler:1
msgid "Returns a function which get the expectations by sampling the state vector"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.non_sampling_sampler:1
msgid "Calculate the expectations without sampling."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.sparse_expectation:1
msgid "Calculate expectation value <vec|mat|vec>."
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.sparse_expectation:4
msgid "mat (scipy sparse matrix): Sparse matrix vec (numpy array): Vector"
msgstr ""

#: ../../../blueqat/vqe.py:docstring of blueqat.vqe.sparse_expectation:8
msgid "(Real part of) expectation value <vec|mat|vec>. Remarks: when mat is Hermitian, <vec|mat|vec> is real."
msgstr ""

#: ../../source/api/blueqat.rst:40
msgid "blueqat.wq module"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt:1
msgid "Optimizer for SA/SQA."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.plot:1
msgid "Draws energy chart using matplotlib."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.run:1
msgid "Run SA with provided QUBO.  Set qubo attribute in advance of calling this method."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.sqa:1
msgid "Run SQA with provided QUBO. Set qubo attribute in advance of calling this method."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.E:1
msgid "List of energies"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.Gf:1
msgid "Final strength of transverse magnetic field. [SQA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.Gs:1
msgid "Initial strength of transverse magnetic field. [SQA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.R:1
msgid "Descreasing rate of temperature [SA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.RBMvisible:1
msgid "RBM Models"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.Tf:1
msgid "Final temperature [SA]. Temperature [SQA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.Ts:1
msgid "Initial temperature [SA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.ite:1
msgid "Iterations [SA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.qubo:1
msgid "QUBO"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.Opt.tro:1
msgid "Trotter slices [SQA]"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.diag:1
msgid "Create QUBO with diag from list"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:1
msgid "Make sympy symbols q0, q1, ..."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:5
msgid "n(int), m(int, optional):"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:0
msgid "If specified both n and m, returns [qn, q(n+1), ..., qm],"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:0
msgid "Only n is specified, returns[q0, q1, ..., qn]."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:7
#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:9
msgid "Return:"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.make_qs:8
msgid "tuple(Symbol): Tuple of sympy symbols."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:1
msgid "Convert n-body problem to 2-body problem."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:0
msgid "expr: sympy expressions to be separated."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:0
msgid "qs: sympy's symbols to be used as supplementary variable."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:9
msgid "new_expr(sympy expr), constraints(sympy expr), mapping(dict(str, str -> Symbol)):"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:0
msgid "`new_expr` is converted problem, `constraints` is constraints for supplementary variable."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:0
msgid "You may use `expr = new_expr + delta * constraints`, delta is floating point variable."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.nbody_separation:0
msgid "mapping is supplementary variable's mapping."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.net:1
msgid "Automatically create QUBO which has value 1 for all connectivity defined by array of edges and graph size N"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.net:12
msgid "this create 4*4 QUBO and put value 1 on connection between 0th and 1st qubit, 1st and 2nd qubit"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.pauli:1
msgid "Convert to pauli operators of universal gate model."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.qn_to_qubo:1
msgid "Convert Sympy's expr to QUBO."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.qn_to_qubo:4
msgid "expr: Sympy's quadratic expression with variable `q0`, `q1`, ..."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.qn_to_qubo:6
msgid "[[float]]: Returns QUBO matrix."
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.rands:1
msgid "Create QUBO with random number"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.sel:1
msgid "Automatically create QUBO which select K qubits from N qubits"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.sel:13
msgid "if you set array on the 3rd params, the result likely to choose the nth qubit in the array"
msgstr ""

#: ../../../blueqat/wq.py:docstring of blueqat.wq.zeros:1
msgid "Create QUBO with all element value as 0"
msgstr ""

#: ../../source/api/blueqat.rst:48
msgid "Module contents"
msgstr ""

#: ../../source/api/modules.rst:2
msgid "API Reference"
msgstr ""

